// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"rabbitmq-service-broker/rabbithutch"
	"sync"
)

type FakeRabbitHutch struct {
	CreateUserAndGrantPermissionsStub        func(string, string, string) (string, error)
	createUserAndGrantPermissionsMutex       sync.RWMutex
	createUserAndGrantPermissionsArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	createUserAndGrantPermissionsReturns struct {
		result1 string
		result2 error
	}
	createUserAndGrantPermissionsReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	DeleteUserAndConnectionsStub        func(string) error
	deleteUserAndConnectionsMutex       sync.RWMutex
	deleteUserAndConnectionsArgsForCall []struct {
		arg1 string
	}
	deleteUserAndConnectionsReturns struct {
		result1 error
	}
	deleteUserAndConnectionsReturnsOnCall map[int]struct {
		result1 error
	}
	ProtocolPortsStub        func() (map[string]int, error)
	protocolPortsMutex       sync.RWMutex
	protocolPortsArgsForCall []struct {
	}
	protocolPortsReturns struct {
		result1 map[string]int
		result2 error
	}
	protocolPortsReturnsOnCall map[int]struct {
		result1 map[string]int
		result2 error
	}
	VHostDeleteStub        func(string) error
	vHostDeleteMutex       sync.RWMutex
	vHostDeleteArgsForCall []struct {
		arg1 string
	}
	vHostDeleteReturns struct {
		result1 error
	}
	vHostDeleteReturnsOnCall map[int]struct {
		result1 error
	}
	VHostExistsStub        func(string) (bool, error)
	vHostExistsMutex       sync.RWMutex
	vHostExistsArgsForCall []struct {
		arg1 string
	}
	vHostExistsReturns struct {
		result1 bool
		result2 error
	}
	vHostExistsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRabbitHutch) CreateUserAndGrantPermissions(arg1 string, arg2 string, arg3 string) (string, error) {
	fake.createUserAndGrantPermissionsMutex.Lock()
	ret, specificReturn := fake.createUserAndGrantPermissionsReturnsOnCall[len(fake.createUserAndGrantPermissionsArgsForCall)]
	fake.createUserAndGrantPermissionsArgsForCall = append(fake.createUserAndGrantPermissionsArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateUserAndGrantPermissions", []interface{}{arg1, arg2, arg3})
	fake.createUserAndGrantPermissionsMutex.Unlock()
	if fake.CreateUserAndGrantPermissionsStub != nil {
		return fake.CreateUserAndGrantPermissionsStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createUserAndGrantPermissionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRabbitHutch) CreateUserAndGrantPermissionsCallCount() int {
	fake.createUserAndGrantPermissionsMutex.RLock()
	defer fake.createUserAndGrantPermissionsMutex.RUnlock()
	return len(fake.createUserAndGrantPermissionsArgsForCall)
}

func (fake *FakeRabbitHutch) CreateUserAndGrantPermissionsCalls(stub func(string, string, string) (string, error)) {
	fake.createUserAndGrantPermissionsMutex.Lock()
	defer fake.createUserAndGrantPermissionsMutex.Unlock()
	fake.CreateUserAndGrantPermissionsStub = stub
}

func (fake *FakeRabbitHutch) CreateUserAndGrantPermissionsArgsForCall(i int) (string, string, string) {
	fake.createUserAndGrantPermissionsMutex.RLock()
	defer fake.createUserAndGrantPermissionsMutex.RUnlock()
	argsForCall := fake.createUserAndGrantPermissionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRabbitHutch) CreateUserAndGrantPermissionsReturns(result1 string, result2 error) {
	fake.createUserAndGrantPermissionsMutex.Lock()
	defer fake.createUserAndGrantPermissionsMutex.Unlock()
	fake.CreateUserAndGrantPermissionsStub = nil
	fake.createUserAndGrantPermissionsReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRabbitHutch) CreateUserAndGrantPermissionsReturnsOnCall(i int, result1 string, result2 error) {
	fake.createUserAndGrantPermissionsMutex.Lock()
	defer fake.createUserAndGrantPermissionsMutex.Unlock()
	fake.CreateUserAndGrantPermissionsStub = nil
	if fake.createUserAndGrantPermissionsReturnsOnCall == nil {
		fake.createUserAndGrantPermissionsReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createUserAndGrantPermissionsReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRabbitHutch) DeleteUserAndConnections(arg1 string) error {
	fake.deleteUserAndConnectionsMutex.Lock()
	ret, specificReturn := fake.deleteUserAndConnectionsReturnsOnCall[len(fake.deleteUserAndConnectionsArgsForCall)]
	fake.deleteUserAndConnectionsArgsForCall = append(fake.deleteUserAndConnectionsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteUserAndConnections", []interface{}{arg1})
	fake.deleteUserAndConnectionsMutex.Unlock()
	if fake.DeleteUserAndConnectionsStub != nil {
		return fake.DeleteUserAndConnectionsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteUserAndConnectionsReturns
	return fakeReturns.result1
}

func (fake *FakeRabbitHutch) DeleteUserAndConnectionsCallCount() int {
	fake.deleteUserAndConnectionsMutex.RLock()
	defer fake.deleteUserAndConnectionsMutex.RUnlock()
	return len(fake.deleteUserAndConnectionsArgsForCall)
}

func (fake *FakeRabbitHutch) DeleteUserAndConnectionsCalls(stub func(string) error) {
	fake.deleteUserAndConnectionsMutex.Lock()
	defer fake.deleteUserAndConnectionsMutex.Unlock()
	fake.DeleteUserAndConnectionsStub = stub
}

func (fake *FakeRabbitHutch) DeleteUserAndConnectionsArgsForCall(i int) string {
	fake.deleteUserAndConnectionsMutex.RLock()
	defer fake.deleteUserAndConnectionsMutex.RUnlock()
	argsForCall := fake.deleteUserAndConnectionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRabbitHutch) DeleteUserAndConnectionsReturns(result1 error) {
	fake.deleteUserAndConnectionsMutex.Lock()
	defer fake.deleteUserAndConnectionsMutex.Unlock()
	fake.DeleteUserAndConnectionsStub = nil
	fake.deleteUserAndConnectionsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRabbitHutch) DeleteUserAndConnectionsReturnsOnCall(i int, result1 error) {
	fake.deleteUserAndConnectionsMutex.Lock()
	defer fake.deleteUserAndConnectionsMutex.Unlock()
	fake.DeleteUserAndConnectionsStub = nil
	if fake.deleteUserAndConnectionsReturnsOnCall == nil {
		fake.deleteUserAndConnectionsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteUserAndConnectionsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRabbitHutch) ProtocolPorts() (map[string]int, error) {
	fake.protocolPortsMutex.Lock()
	ret, specificReturn := fake.protocolPortsReturnsOnCall[len(fake.protocolPortsArgsForCall)]
	fake.protocolPortsArgsForCall = append(fake.protocolPortsArgsForCall, struct {
	}{})
	fake.recordInvocation("ProtocolPorts", []interface{}{})
	fake.protocolPortsMutex.Unlock()
	if fake.ProtocolPortsStub != nil {
		return fake.ProtocolPortsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.protocolPortsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRabbitHutch) ProtocolPortsCallCount() int {
	fake.protocolPortsMutex.RLock()
	defer fake.protocolPortsMutex.RUnlock()
	return len(fake.protocolPortsArgsForCall)
}

func (fake *FakeRabbitHutch) ProtocolPortsCalls(stub func() (map[string]int, error)) {
	fake.protocolPortsMutex.Lock()
	defer fake.protocolPortsMutex.Unlock()
	fake.ProtocolPortsStub = stub
}

func (fake *FakeRabbitHutch) ProtocolPortsReturns(result1 map[string]int, result2 error) {
	fake.protocolPortsMutex.Lock()
	defer fake.protocolPortsMutex.Unlock()
	fake.ProtocolPortsStub = nil
	fake.protocolPortsReturns = struct {
		result1 map[string]int
		result2 error
	}{result1, result2}
}

func (fake *FakeRabbitHutch) ProtocolPortsReturnsOnCall(i int, result1 map[string]int, result2 error) {
	fake.protocolPortsMutex.Lock()
	defer fake.protocolPortsMutex.Unlock()
	fake.ProtocolPortsStub = nil
	if fake.protocolPortsReturnsOnCall == nil {
		fake.protocolPortsReturnsOnCall = make(map[int]struct {
			result1 map[string]int
			result2 error
		})
	}
	fake.protocolPortsReturnsOnCall[i] = struct {
		result1 map[string]int
		result2 error
	}{result1, result2}
}

func (fake *FakeRabbitHutch) VHostDelete(arg1 string) error {
	fake.vHostDeleteMutex.Lock()
	ret, specificReturn := fake.vHostDeleteReturnsOnCall[len(fake.vHostDeleteArgsForCall)]
	fake.vHostDeleteArgsForCall = append(fake.vHostDeleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("VHostDelete", []interface{}{arg1})
	fake.vHostDeleteMutex.Unlock()
	if fake.VHostDeleteStub != nil {
		return fake.VHostDeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.vHostDeleteReturns
	return fakeReturns.result1
}

func (fake *FakeRabbitHutch) VHostDeleteCallCount() int {
	fake.vHostDeleteMutex.RLock()
	defer fake.vHostDeleteMutex.RUnlock()
	return len(fake.vHostDeleteArgsForCall)
}

func (fake *FakeRabbitHutch) VHostDeleteCalls(stub func(string) error) {
	fake.vHostDeleteMutex.Lock()
	defer fake.vHostDeleteMutex.Unlock()
	fake.VHostDeleteStub = stub
}

func (fake *FakeRabbitHutch) VHostDeleteArgsForCall(i int) string {
	fake.vHostDeleteMutex.RLock()
	defer fake.vHostDeleteMutex.RUnlock()
	argsForCall := fake.vHostDeleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRabbitHutch) VHostDeleteReturns(result1 error) {
	fake.vHostDeleteMutex.Lock()
	defer fake.vHostDeleteMutex.Unlock()
	fake.VHostDeleteStub = nil
	fake.vHostDeleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRabbitHutch) VHostDeleteReturnsOnCall(i int, result1 error) {
	fake.vHostDeleteMutex.Lock()
	defer fake.vHostDeleteMutex.Unlock()
	fake.VHostDeleteStub = nil
	if fake.vHostDeleteReturnsOnCall == nil {
		fake.vHostDeleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.vHostDeleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRabbitHutch) VHostExists(arg1 string) (bool, error) {
	fake.vHostExistsMutex.Lock()
	ret, specificReturn := fake.vHostExistsReturnsOnCall[len(fake.vHostExistsArgsForCall)]
	fake.vHostExistsArgsForCall = append(fake.vHostExistsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("VHostExists", []interface{}{arg1})
	fake.vHostExistsMutex.Unlock()
	if fake.VHostExistsStub != nil {
		return fake.VHostExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.vHostExistsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRabbitHutch) VHostExistsCallCount() int {
	fake.vHostExistsMutex.RLock()
	defer fake.vHostExistsMutex.RUnlock()
	return len(fake.vHostExistsArgsForCall)
}

func (fake *FakeRabbitHutch) VHostExistsCalls(stub func(string) (bool, error)) {
	fake.vHostExistsMutex.Lock()
	defer fake.vHostExistsMutex.Unlock()
	fake.VHostExistsStub = stub
}

func (fake *FakeRabbitHutch) VHostExistsArgsForCall(i int) string {
	fake.vHostExistsMutex.RLock()
	defer fake.vHostExistsMutex.RUnlock()
	argsForCall := fake.vHostExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRabbitHutch) VHostExistsReturns(result1 bool, result2 error) {
	fake.vHostExistsMutex.Lock()
	defer fake.vHostExistsMutex.Unlock()
	fake.VHostExistsStub = nil
	fake.vHostExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeRabbitHutch) VHostExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.vHostExistsMutex.Lock()
	defer fake.vHostExistsMutex.Unlock()
	fake.VHostExistsStub = nil
	if fake.vHostExistsReturnsOnCall == nil {
		fake.vHostExistsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.vHostExistsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeRabbitHutch) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createUserAndGrantPermissionsMutex.RLock()
	defer fake.createUserAndGrantPermissionsMutex.RUnlock()
	fake.deleteUserAndConnectionsMutex.RLock()
	defer fake.deleteUserAndConnectionsMutex.RUnlock()
	fake.protocolPortsMutex.RLock()
	defer fake.protocolPortsMutex.RUnlock()
	fake.vHostDeleteMutex.RLock()
	defer fake.vHostDeleteMutex.RUnlock()
	fake.vHostExistsMutex.RLock()
	defer fake.vHostExistsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRabbitHutch) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rabbithutch.RabbitHutch = new(FakeRabbitHutch)
