// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"rabbitmq-service-broker/rabbithutch"
	"sync"
)

type FakeRabbitHutch struct {
	CreateUserStub        func(string, string, string) (string, error)
	createUserMutex       sync.RWMutex
	createUserArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	createUserReturns struct {
		result1 string
		result2 error
	}
	createUserReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	DeleteUserAndConnectionsStub        func(string) error
	deleteUserAndConnectionsMutex       sync.RWMutex
	deleteUserAndConnectionsArgsForCall []struct {
		arg1 string
	}
	deleteUserAndConnectionsReturns struct {
		result1 error
	}
	deleteUserAndConnectionsReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureVHostExistsStub        func(string) error
	ensureVHostExistsMutex       sync.RWMutex
	ensureVHostExistsArgsForCall []struct {
		arg1 string
	}
	ensureVHostExistsReturns struct {
		result1 error
	}
	ensureVHostExistsReturnsOnCall map[int]struct {
		result1 error
	}
	ProtocolPortsStub        func() (map[string]int, error)
	protocolPortsMutex       sync.RWMutex
	protocolPortsArgsForCall []struct {
	}
	protocolPortsReturns struct {
		result1 map[string]int
		result2 error
	}
	protocolPortsReturnsOnCall map[int]struct {
		result1 map[string]int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRabbitHutch) CreateUser(arg1 string, arg2 string, arg3 string) (string, error) {
	fake.createUserMutex.Lock()
	ret, specificReturn := fake.createUserReturnsOnCall[len(fake.createUserArgsForCall)]
	fake.createUserArgsForCall = append(fake.createUserArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateUser", []interface{}{arg1, arg2, arg3})
	fake.createUserMutex.Unlock()
	if fake.CreateUserStub != nil {
		return fake.CreateUserStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createUserReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRabbitHutch) CreateUserCallCount() int {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return len(fake.createUserArgsForCall)
}

func (fake *FakeRabbitHutch) CreateUserCalls(stub func(string, string, string) (string, error)) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = stub
}

func (fake *FakeRabbitHutch) CreateUserArgsForCall(i int) (string, string, string) {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	argsForCall := fake.createUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRabbitHutch) CreateUserReturns(result1 string, result2 error) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	fake.createUserReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRabbitHutch) CreateUserReturnsOnCall(i int, result1 string, result2 error) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	if fake.createUserReturnsOnCall == nil {
		fake.createUserReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createUserReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRabbitHutch) DeleteUserAndConnections(arg1 string) error {
	fake.deleteUserAndConnectionsMutex.Lock()
	ret, specificReturn := fake.deleteUserAndConnectionsReturnsOnCall[len(fake.deleteUserAndConnectionsArgsForCall)]
	fake.deleteUserAndConnectionsArgsForCall = append(fake.deleteUserAndConnectionsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteUserAndConnections", []interface{}{arg1})
	fake.deleteUserAndConnectionsMutex.Unlock()
	if fake.DeleteUserAndConnectionsStub != nil {
		return fake.DeleteUserAndConnectionsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteUserAndConnectionsReturns
	return fakeReturns.result1
}

func (fake *FakeRabbitHutch) DeleteUserAndConnectionsCallCount() int {
	fake.deleteUserAndConnectionsMutex.RLock()
	defer fake.deleteUserAndConnectionsMutex.RUnlock()
	return len(fake.deleteUserAndConnectionsArgsForCall)
}

func (fake *FakeRabbitHutch) DeleteUserAndConnectionsCalls(stub func(string) error) {
	fake.deleteUserAndConnectionsMutex.Lock()
	defer fake.deleteUserAndConnectionsMutex.Unlock()
	fake.DeleteUserAndConnectionsStub = stub
}

func (fake *FakeRabbitHutch) DeleteUserAndConnectionsArgsForCall(i int) string {
	fake.deleteUserAndConnectionsMutex.RLock()
	defer fake.deleteUserAndConnectionsMutex.RUnlock()
	argsForCall := fake.deleteUserAndConnectionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRabbitHutch) DeleteUserAndConnectionsReturns(result1 error) {
	fake.deleteUserAndConnectionsMutex.Lock()
	defer fake.deleteUserAndConnectionsMutex.Unlock()
	fake.DeleteUserAndConnectionsStub = nil
	fake.deleteUserAndConnectionsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRabbitHutch) DeleteUserAndConnectionsReturnsOnCall(i int, result1 error) {
	fake.deleteUserAndConnectionsMutex.Lock()
	defer fake.deleteUserAndConnectionsMutex.Unlock()
	fake.DeleteUserAndConnectionsStub = nil
	if fake.deleteUserAndConnectionsReturnsOnCall == nil {
		fake.deleteUserAndConnectionsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteUserAndConnectionsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRabbitHutch) EnsureVHostExists(arg1 string) error {
	fake.ensureVHostExistsMutex.Lock()
	ret, specificReturn := fake.ensureVHostExistsReturnsOnCall[len(fake.ensureVHostExistsArgsForCall)]
	fake.ensureVHostExistsArgsForCall = append(fake.ensureVHostExistsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("EnsureVHostExists", []interface{}{arg1})
	fake.ensureVHostExistsMutex.Unlock()
	if fake.EnsureVHostExistsStub != nil {
		return fake.EnsureVHostExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.ensureVHostExistsReturns
	return fakeReturns.result1
}

func (fake *FakeRabbitHutch) EnsureVHostExistsCallCount() int {
	fake.ensureVHostExistsMutex.RLock()
	defer fake.ensureVHostExistsMutex.RUnlock()
	return len(fake.ensureVHostExistsArgsForCall)
}

func (fake *FakeRabbitHutch) EnsureVHostExistsCalls(stub func(string) error) {
	fake.ensureVHostExistsMutex.Lock()
	defer fake.ensureVHostExistsMutex.Unlock()
	fake.EnsureVHostExistsStub = stub
}

func (fake *FakeRabbitHutch) EnsureVHostExistsArgsForCall(i int) string {
	fake.ensureVHostExistsMutex.RLock()
	defer fake.ensureVHostExistsMutex.RUnlock()
	argsForCall := fake.ensureVHostExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRabbitHutch) EnsureVHostExistsReturns(result1 error) {
	fake.ensureVHostExistsMutex.Lock()
	defer fake.ensureVHostExistsMutex.Unlock()
	fake.EnsureVHostExistsStub = nil
	fake.ensureVHostExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRabbitHutch) EnsureVHostExistsReturnsOnCall(i int, result1 error) {
	fake.ensureVHostExistsMutex.Lock()
	defer fake.ensureVHostExistsMutex.Unlock()
	fake.EnsureVHostExistsStub = nil
	if fake.ensureVHostExistsReturnsOnCall == nil {
		fake.ensureVHostExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureVHostExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRabbitHutch) ProtocolPorts() (map[string]int, error) {
	fake.protocolPortsMutex.Lock()
	ret, specificReturn := fake.protocolPortsReturnsOnCall[len(fake.protocolPortsArgsForCall)]
	fake.protocolPortsArgsForCall = append(fake.protocolPortsArgsForCall, struct {
	}{})
	fake.recordInvocation("ProtocolPorts", []interface{}{})
	fake.protocolPortsMutex.Unlock()
	if fake.ProtocolPortsStub != nil {
		return fake.ProtocolPortsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.protocolPortsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRabbitHutch) ProtocolPortsCallCount() int {
	fake.protocolPortsMutex.RLock()
	defer fake.protocolPortsMutex.RUnlock()
	return len(fake.protocolPortsArgsForCall)
}

func (fake *FakeRabbitHutch) ProtocolPortsCalls(stub func() (map[string]int, error)) {
	fake.protocolPortsMutex.Lock()
	defer fake.protocolPortsMutex.Unlock()
	fake.ProtocolPortsStub = stub
}

func (fake *FakeRabbitHutch) ProtocolPortsReturns(result1 map[string]int, result2 error) {
	fake.protocolPortsMutex.Lock()
	defer fake.protocolPortsMutex.Unlock()
	fake.ProtocolPortsStub = nil
	fake.protocolPortsReturns = struct {
		result1 map[string]int
		result2 error
	}{result1, result2}
}

func (fake *FakeRabbitHutch) ProtocolPortsReturnsOnCall(i int, result1 map[string]int, result2 error) {
	fake.protocolPortsMutex.Lock()
	defer fake.protocolPortsMutex.Unlock()
	fake.ProtocolPortsStub = nil
	if fake.protocolPortsReturnsOnCall == nil {
		fake.protocolPortsReturnsOnCall = make(map[int]struct {
			result1 map[string]int
			result2 error
		})
	}
	fake.protocolPortsReturnsOnCall[i] = struct {
		result1 map[string]int
		result2 error
	}{result1, result2}
}

func (fake *FakeRabbitHutch) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	fake.deleteUserAndConnectionsMutex.RLock()
	defer fake.deleteUserAndConnectionsMutex.RUnlock()
	fake.ensureVHostExistsMutex.RLock()
	defer fake.ensureVHostExistsMutex.RUnlock()
	fake.protocolPortsMutex.RLock()
	defer fake.protocolPortsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRabbitHutch) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rabbithutch.RabbitHutch = new(FakeRabbitHutch)
