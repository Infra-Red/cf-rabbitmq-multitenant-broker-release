// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net/http"
	"rabbitmq-service-broker/broker"
	"sync"

	rabbithole "github.com/michaelklishin/rabbit-hole"
)

type FakeAPIClient struct {
	GetVhostStub        func(string) (*rabbithole.VhostInfo, error)
	getVhostMutex       sync.RWMutex
	getVhostArgsForCall []struct {
		arg1 string
	}
	getVhostReturns struct {
		result1 *rabbithole.VhostInfo
		result2 error
	}
	getVhostReturnsOnCall map[int]struct {
		result1 *rabbithole.VhostInfo
		result2 error
	}
	PutVhostStub        func(string, rabbithole.VhostSettings) (*http.Response, error)
	putVhostMutex       sync.RWMutex
	putVhostArgsForCall []struct {
		arg1 string
		arg2 rabbithole.VhostSettings
	}
	putVhostReturns struct {
		result1 *http.Response
		result2 error
	}
	putVhostReturnsOnCall map[int]struct {
		result1 *http.Response
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPIClient) GetVhost(arg1 string) (*rabbithole.VhostInfo, error) {
	fake.getVhostMutex.Lock()
	ret, specificReturn := fake.getVhostReturnsOnCall[len(fake.getVhostArgsForCall)]
	fake.getVhostArgsForCall = append(fake.getVhostArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetVhost", []interface{}{arg1})
	fake.getVhostMutex.Unlock()
	if fake.GetVhostStub != nil {
		return fake.GetVhostStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getVhostReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPIClient) GetVhostCallCount() int {
	fake.getVhostMutex.RLock()
	defer fake.getVhostMutex.RUnlock()
	return len(fake.getVhostArgsForCall)
}

func (fake *FakeAPIClient) GetVhostCalls(stub func(string) (*rabbithole.VhostInfo, error)) {
	fake.getVhostMutex.Lock()
	defer fake.getVhostMutex.Unlock()
	fake.GetVhostStub = stub
}

func (fake *FakeAPIClient) GetVhostArgsForCall(i int) string {
	fake.getVhostMutex.RLock()
	defer fake.getVhostMutex.RUnlock()
	argsForCall := fake.getVhostArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAPIClient) GetVhostReturns(result1 *rabbithole.VhostInfo, result2 error) {
	fake.getVhostMutex.Lock()
	defer fake.getVhostMutex.Unlock()
	fake.GetVhostStub = nil
	fake.getVhostReturns = struct {
		result1 *rabbithole.VhostInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) GetVhostReturnsOnCall(i int, result1 *rabbithole.VhostInfo, result2 error) {
	fake.getVhostMutex.Lock()
	defer fake.getVhostMutex.Unlock()
	fake.GetVhostStub = nil
	if fake.getVhostReturnsOnCall == nil {
		fake.getVhostReturnsOnCall = make(map[int]struct {
			result1 *rabbithole.VhostInfo
			result2 error
		})
	}
	fake.getVhostReturnsOnCall[i] = struct {
		result1 *rabbithole.VhostInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) PutVhost(arg1 string, arg2 rabbithole.VhostSettings) (*http.Response, error) {
	fake.putVhostMutex.Lock()
	ret, specificReturn := fake.putVhostReturnsOnCall[len(fake.putVhostArgsForCall)]
	fake.putVhostArgsForCall = append(fake.putVhostArgsForCall, struct {
		arg1 string
		arg2 rabbithole.VhostSettings
	}{arg1, arg2})
	fake.recordInvocation("PutVhost", []interface{}{arg1, arg2})
	fake.putVhostMutex.Unlock()
	if fake.PutVhostStub != nil {
		return fake.PutVhostStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putVhostReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPIClient) PutVhostCallCount() int {
	fake.putVhostMutex.RLock()
	defer fake.putVhostMutex.RUnlock()
	return len(fake.putVhostArgsForCall)
}

func (fake *FakeAPIClient) PutVhostCalls(stub func(string, rabbithole.VhostSettings) (*http.Response, error)) {
	fake.putVhostMutex.Lock()
	defer fake.putVhostMutex.Unlock()
	fake.PutVhostStub = stub
}

func (fake *FakeAPIClient) PutVhostArgsForCall(i int) (string, rabbithole.VhostSettings) {
	fake.putVhostMutex.RLock()
	defer fake.putVhostMutex.RUnlock()
	argsForCall := fake.putVhostArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPIClient) PutVhostReturns(result1 *http.Response, result2 error) {
	fake.putVhostMutex.Lock()
	defer fake.putVhostMutex.Unlock()
	fake.PutVhostStub = nil
	fake.putVhostReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) PutVhostReturnsOnCall(i int, result1 *http.Response, result2 error) {
	fake.putVhostMutex.Lock()
	defer fake.putVhostMutex.Unlock()
	fake.PutVhostStub = nil
	if fake.putVhostReturnsOnCall == nil {
		fake.putVhostReturnsOnCall = make(map[int]struct {
			result1 *http.Response
			result2 error
		})
	}
	fake.putVhostReturnsOnCall[i] = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getVhostMutex.RLock()
	defer fake.getVhostMutex.RUnlock()
	fake.putVhostMutex.RLock()
	defer fake.putVhostMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPIClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ broker.APIClient = new(FakeAPIClient)
